AWSTemplateFormatVersion: '2010-09-09'
Description: StarRocks Cluster with 1 FE and 3 BE nodes in Mumbai region only

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: r5.large
    AllowedValues:
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can SSH and access the Web UI
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 36.50.162.241/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range.

  LatestAmazonLinux2AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI ID from SSM Parameter Store

Conditions:
  IsMumbaiRegion: !Equals [ !Ref "AWS::Region", "ap-south-1" ]

Resources:
  # === IAM Role and Instance Profile ===
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2InstanceRole
  VPC:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.1.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: StarRocksVPC

  PublicSubnet1:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: StarRocksPublicSubnet1

  InternetGateway:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: StarRocksIGW

  GatewayAttachment:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: StarRocksPublicRouteTable

  PublicRoute:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  FESecurityGroup:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for StarRocks FE node
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: 8030
        ToPort: 8030
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 9020
        ToPort: 9020
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 9030
        ToPort: 9030
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 9010
        ToPort: 9010
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        CidrIp: 0.0.0.0/0
  BESecurityGroup:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for StarRocks BE nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: 8040
        ToPort: 8040
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 9050
        ToPort: 9050
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 9060
        ToPort: 9060
        CidrIp: 10.0.1.0/16
      - IpProtocol: tcp
        FromPort: 8060
        ToPort: 8060
        CidrIp: 10.0.1.0/16
  FEInstance:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 15
          VolumeType: gp3
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinux2AMI
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref FESecurityGroup
        SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: StarRocksFE
      UserData: !Base64 |
        #!/bin/bash -xe
        echo "Updating system..."
        yum update -y
        sudo yum install mariadb-server mysql git -y
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        amazon-linux-extras install docker -y
        service docker start
        usermod -aG docker ec2-user
        mkdir -p /data/fe/meta /data/fe/log
        docker pull starrocks/fe-ubuntu:latest
        echo "Starting FE container..."
        docker run -d --name fe -p 8030:8030 -p 9020:9020 -p 9030:9030 -p 9010:9010 -v /data/fe/meta:/opt/starrocks/fe/meta -v /data/fe/log:/opt/starrocks/fe/log --entrypoint "/opt/starrocks/fe/bin/start_fe.sh" starrocks/fe-ubuntu:latest
        sleep 10
        # Fetch BE private IPs into a comma-separated string with :9050 appended to each IP
        BE_IPS=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=StarRocksBE1,StarRocksBE2,StarRocksBE3" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text | tr '\t' '\n' | awk '{printf "\"%s:9050\"", $1; if (NR != 0) printf ","}' | sed 's/,$//')
        # Wait for MySQL to be up (optional, add retries if needed)
        sleep 15
        # Run the MySQL command to add backends
        mysql -h 127.0.0.1 -P 9030 -uroot -p"" -e "ALTER SYSTEM ADD BACKEND $BE_IPS;"
        # Clone your GitHub repo of metric-collector
        sudo git clone https://github.com/shubhzzz19/task2.git
        # Change directory to the cloned repo
        cd task2/metrics-collector
        # Read IPs into array for exporting individual BE variables with port 8040
        IPS=($(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=StarRocksBE1,StarRocksBE2,StarRocksBE3" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text))
        cat << EOF > be_nodes.env
            BE1=${IPS[0]}:8040
            BE2=${IPS[1]}:8040
            BE3=${IPS[2]}:8040
        EOF
        # Build and run the docker-compose containers in detached mode
        docker-compose up -d --build

  BEInstance1:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 15
          VolumeType: gp3
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinux2AMI
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref BESecurityGroup
        SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: StarRocksBE1
      UserData: !Base64 |
        #!/bin/bash -xe
        echo "Updating system..."
        yum update -y
        echo "Installing Docker..."
        amazon-linux-extras install docker -y
        service docker start
        usermod -aG docker ec2-user
        echo "Creating directories..."
        mkdir -p /data/be/storage /data/be/log /data/be/conf
        echo "Writing be.conf..."
        cat <<EOF >/data/be/conf/be.conf
            priority_networks = 10.0.1.0/16
            webserver_port = 8040
            heartbeat_service_port = 9050
            be_port = 9060
            brpc_port = 8060
        EOF
        echo "Pulling StarRocks BE image..."
        docker pull starrocks/be-ubuntu:latest
        echo "Starting BE container..."
        docker run -d --network host --name be -p 8040:8040 -p 9050:9050 -p 9060:9060 -v /data/be/storage:/opt/starrocks/be/storage -v /data/be/log:/opt/starrocks/be/log -v /data/be/conf/be.conf:/opt/starrocks/be/conf/be.conf starrocks/be-ubuntu:latest /opt/starrocks/be/bin/start_be.sh

  BEInstance2:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 15
          VolumeType: gp3
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinux2AMI
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref BESecurityGroup
        SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: StarRocksBE2
      UserData: !Base64 |
        #!/bin/bash -xe
        echo "Updating system..."
        yum update -y
        echo "Installing Docker..."
        amazon-linux-extras install docker -y
        service docker start
        usermod -aG docker ec2-user
        echo "Creating directories..."
        mkdir -p /data/be/storage /data/be/log /data/be/conf
        echo "Writing be.conf..."
        cat <<EOF >/data/be/conf/be.conf
            priority_networks = 10.0.1.0/16
            webserver_port = 8040
            heartbeat_service_port = 9050
            be_port = 9060
            brpc_port = 8060
        EOF
        echo "Pulling StarRocks BE image..."
        docker pull starrocks/be-ubuntu:latest
        echo "Starting BE container..."
        docker run -d --network host --name be -p 8040:8040 -p 9050:9050 -p 9060:9060 -v /data/be/storage:/opt/starrocks/be/storage -v /data/be/log:/opt/starrocks/be/log -v /data/be/conf/be.conf:/opt/starrocks/be/conf/be.conf starrocks/be-ubuntu:latest /opt/starrocks/be/bin/start_be.sh

  BEInstance3:
    Condition: IsMumbaiRegion
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 15
          VolumeType: gp3
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinux2AMI
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet:
        - !Ref BESecurityGroup
        SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: StarRocksBE3
      UserData: !Base64 |
        #!/bin/bash -xe
        echo "Updating system..."
        yum update -y
        echo "Installing Docker..."
        amazon-linux-extras install docker -y
        service docker start
        usermod -aG docker ec2-user
        echo "Creating directories..."
        mkdir -p /data/be/storage /data/be/log /data/be/conf
        echo "Writing be.conf..."
        cat <<EOF >/data/be/conf/be.conf
            priority_networks = 10.0.1.0/16
            webserver_port = 8040
            heartbeat_service_port = 9050
            be_port = 9060
            brpc_port = 8060
        EOF
        echo "Pulling StarRocks BE image..."
        docker pull starrocks/be-ubuntu:latest
        echo "Starting BE container..."
        docker run -d --network host --name be -p 8040:8040 -p 9050:9050 -p 9060:9060 -v /data/be/storage:/opt/starrocks/be/storage -v /data/be/log:/opt/starrocks/be/log -v /data/be/conf/be.conf:/opt/starrocks/be/conf/be.conf starrocks/be-ubuntu:latest /opt/starrocks/be/bin/start_be.sh

Outputs:
  FEInstancePublicIP:
    Description: Public IP of FE instance
    Value: !GetAtt FEInstance.PublicIp
  BEInstance1PrivateIP:
    Description: Private IP address of the StarRocks BE node 1
    Value: !GetAtt BEInstance1.PrivateIp
  BEInstance2PrivateIP:
    Description: Private IP address of the StarRocks BE node 2
    Value: !GetAtt BEInstance2.PrivateIp
  BEInstance3PrivateIP:
    Description: Private IP address of the StarRocks BE node 3
    Value: !GetAtt BEInstance3.PrivateIp
